1. operator precedence for postfix to infix
2. aysmtotic analysis on top coder, NP, P, NP complete and NP hard from geeks for geeks
3. sum of AP and GP
4. LIS
5. KMP
6. multiply 2 numbers represnetd as linked list
7. definition of pre and post order traversal
8. public int hashCode()
    {
        int result = 17;
        result = 31 * result + r;
        result = 31 * result + c;
        return result;
    }
9. min of 3: Math.min(a, Math.min(b, c)) 
10. complete, perfect and full binary tree
11. in array or seq. swapping N with 0, N-1 with 1, N-2 with 2 and so on. Essentially reverses the seq :)
12. if you are dividing range 0 to N by halves - you have infinite loop for 0 to 1 - to check for it test if range has lenght 1 or more than 1
13. for any binary tree inorder + (post or pre or level) order can uniquly identify it. BUT for strict or perfect (not complete) binary tree - only inoder and preorder are enough
14. generate random number generator:
Random randomGenerator = new Random();
int randomInt = randomGenerator.nextInt(100); // generates random integers in the range 0..99
15. to make max possible number with given numbers, like {54, 546, 548, 60} 
you need a comparison function otherwise you will endup using stack and time complexity will be very high
private static int compare(Integer value1, Integer value2)
{
    String X = value1 + "" + value2;
    String Y = value2 + "" + value1;

    return X.compareTo(Y);
}

16. I know you want ot impress but dont strive to give best solution in 1st attempt - giev a working solution first and them optimise it

17. if a sorting order of array is known and array is rotated and you are searching for something look out for the relation between the current vlaue and relative ends - for example: http://www.geeksforgeeks.org/find-minimum-element-in-a-sorted-and-rotated-array/

Amother example: in ascending sorted array - the inflexion point (smallest number) is the only one which has a predecessor which is larger than this number and vice versa for descending sorted array

18. Sorry, this is a long list of things of long-ish topics:
    - thread vs runnable
    - executor
    - thread pool
    - synchronised
    - http://javarevisited.blogspot.in/2011/07/java-multi-threading-interview.html
    - Serialization and related concepts
    
19. quick review:http://www.geeksforgeeks.org/top-25-interview-questions/