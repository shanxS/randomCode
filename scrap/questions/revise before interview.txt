1. operator precedence for postfix to infix
2. aysmtotic analysis on top coder, NP, P, NP complete and NP hard from geeks for geeks
3. sum of AP and GP
4. LIS
5. KMP
6. multiply 2 numbers represnetd as linked list
7. definition of pre and post order traversal
8. public int hashCode()
    {
        int result = 17;
        result = 31 * result + r;
        result = 31 * result + c;
        return result;
    }
    
    if we are doing a UNDIRECTED graph question and we want ot put every UNIQUE edge in set - we have to override hashcode in edge class - this is how I did it last time: https://github.com/shanxS/randomCode/commit/3731da7273e7fdc4a64e8c46ba675e17b16f4e30
9. min of 3: Math.min(a, Math.min(b, c)) 
10. complete, perfect and full binary tree
11. in array or seq. swapping N with 0, N-1 with 1, N-2 with 2 and so on. Essentially reverses the seq :)
12. if you are dividing range 0 to N by halves - you have infinite loop for 0 to 1 - to check for it test if range has lenght 1 or more than 1
13. for any binary tree inorder + (post or pre or level) order can uniquly identify it. BUT for strict or perfect (not complete) binary tree - only preoder and preorder (together) are enough
14. generate random number generator:
Random randomGenerator = new Random();
int randomInt = randomGenerator.nextInt(100); // generates random integers in the range 0..99
15. to make max possible number with given numbers, like {54, 546, 548, 60} 
you need a comparison function otherwise you will endup using stack and time complexity will be very high
private static int compare(Integer value1, Integer value2)
{
    String X = value1 + "" + value2;
    String Y = value2 + "" + value1;

    return X.compareTo(Y);
}

16. I know you want ot impress but dont strive to give best solution in 1st attempt - giev a working solution first and them optimise it

17. if a sorting order of array is known and array is rotated and you are searching for something look out for the relation between the current vlaue and relative ends - for example: http://www.geeksforgeeks.org/find-minimum-element-in-a-sorted-and-rotated-array/

Amother example: in ascending sorted array - the inflexion point (smallest number) is the only one which has a predecessor which is larger than this number and vice versa for descending sorted array

18. Sorry, this is a long list of things of long-ish topics:
    - thread vs runnable
    - executor
    - thread pool
    - synchronised
    - http://javarevisited.blogspot.in/2011/07/java-multi-threading-interview.html
    - Serialization and related concepts
    
19. quick review:http://www.geeksforgeeks.org/top-25-interview-questions/

20. when you see some sort of dependcy between elements - think topological sort

21. In graph theory:
    a. biconnected graph -> graph in which there is no 'single point of failure'
    b. strongly connected -> DIRECTED graph where you can reach any node from any given node
    c. cycle detection is all about having a back edge in DIRECTED graph
    d. revise trajan's algo - quite useful for various cases: 
        http://www.geeksforgeeks.org/tarjan-algorithm-find-strongly-connected-components/
        http://www.geeksforgeeks.org/articulation-points-or-cut-vertices-in-a-graph/
        http://www.geeksforgeeks.org/bridge-in-a-graph/
        http://www.geeksforgeeks.org/biconnectivity-in-a-graph/
    e. classification of nodes based on timing and other advanced material (for what is already quite advance - but hey we 
        aren;t we turnig up the game ?)
        https://people.csail.mit.edu/thies/6.046-web/recitation9.txt
        
22. if you are counting number of elements (as in count of subNodes in union find DS) init intial count with 1 as oopposed to 0 - because 0+0 will always yeild 0 and count will never increase

23. thought: wehre ever we have a hiearchy between actors in system and there no cycle - a graph can be made and topological search can be performed to get hiearch - source: skiena "Stop and Think: Ordering the Sequence"
24. if you are updating some external value in starting of the loop make sure you update it just after loop is over - otherwise you will end up missing last update: example see https://github.com/shanxS/randomCode/commit/99eeab881080f691452899ab1c8bebf5ce219b2a
you have missed updating after the loop

25. for natural (descending) ordering implement comparable as:
    @Override
    public int compareTo(Object o)
    {
        Test otherTest = (Test) o;

        if (otherTest.x > x)
        {
            return -1;
        }
        else if (otherTest.x < x)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    
26. check out types of numbers: http://www.google.co.in/imgres?imgurl=http://scimathmn.org/stemtc/sites/default/files/images/frameworks/math/8.1.1A/image131.jpg&imgrefurl=http://scimathmn.org/stemtc/frameworks/811a-rational-irrational-real-numbers&h=386&w=866&tbnid=2E3Xm11PasI5WM:&tbnh=81&tbnw=184&usg=__NtYGzP_XApvwbNbVMhW3GvsH000=&docid=S24H-C_xfjYcUM&itg=1

27. const in java: https://stackoverflow.com/questions/3827393/java-switch-statement-constant-expression-required-but-it-is-constant

28. size in java - note the relation b/n number of bits and power of 2. Additionaly check the power of 10 you have for them, like int less than 10^10 but more than 10^9

29. dont compare flaot using ==, subtract them and test if value is less than some epsilon

30. rolling karp https://github.com/shanxS/randomCode/commit/e356996ec948bc1645567a9435ef523d398d69b1

31. revise the logic of http://www.geeksforgeeks.org/find-smallest-value-represented-sum-subset-given-array/
and http://www.geeksforgeeks.org/sort-array-wave-form-2/