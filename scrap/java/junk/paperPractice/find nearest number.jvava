// find nearest number

public class Main
{
    public static void main(String[] er)
    {
        Integer[] ar = {32,24,41,21,28,36,47,14,25,31,39};
        BST bst = new BST();
        for (Integer i : ar)
        {
            bst.insert(i);
        }
        bst.pint(bst.getHead());

        Finder f = new Finder();
//        System.out.print(f.find(bst.getHead(), 29));
        System.out.print(f.find(bst.getHead(), 41));

    }
}

class Finder
{
    private Integer num, target;

    public Integer find(Node head, Integer target)
    {
        this.target = target;

        find (head);

        return num;
    }

    private void find(Node node)
    {
        if (node == null || (num  != null && num == target))
        {
            return;
        }

        if (null == num)
        {
            num = node.getValue();
        }
        else if (Math.abs(target-num) > Math.abs(target-node.getValue()))
        {
            num = node.getValue();
        }

        find(node.getLeft());
        find(node.getRight());
    }
}

class BST
{
    private Node head;

    public BST()
    {
        head = null;
    }

    public void insert(Integer v)
    {
        if (head == null)
        {
            head = new Node(v);
        }
        else
        {
            insert(head, v);
        }
    }

    public Node getHead()
    {
        return head;
    }

    public void pint(Node node)
    {
        if (node == null)
        {
            return;
        }

        System.out.print(node.getValue() + " - ");
        if (node.getLeft() != null)
        {
            System.out.print(node.getLeft().getValue());
        }
        System.out.print(", ");
        if (node.getRight() != null)
        {
            System.out.print(node.getRight().getValue());
        }
        System.out.println();

        pint(node.getLeft());
        pint(node.getRight());
    }

    private void insert(Node node, Integer v)
    {
        if (node.getValue() > v)
        {
            if (node.getLeft() != null)
            {
                insert(node.getLeft(), v);
            }
            else
            {
                node.setLeft(new Node(v));
            }
        }
        else if (node.getValue() < v)
        {
            if (node.getRight() != null)
            {
                insert(node.getRight(), v);
            }
            else
            {
                node.setRight(new Node(v));
            }
        }
    }
}

class Node
{
    private Node left, right;
    private Integer value;

    public Node(Integer v)
    {
        value = v;
    }

    public Integer getValue()
    {
        return value;
    }

    public Node getLeft()
    {
        return left;
    }

    public void setLeft(Node left)
    {
        this.left = left;
    }

    public Node getRight()
    {
        return right;
    }

    public void setRight(Node right)
    {
        this.right = right;
    }
}